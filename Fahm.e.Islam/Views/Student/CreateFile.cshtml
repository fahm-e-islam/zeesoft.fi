@model ZeeSoft.ClassRoomJson.ResourceFile

@{
    ViewBag.Title = "CreateFile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .demo-section.k-content {
    box-shadow: 0 1px 2px 1px rgba(0,0,0,.08), 0 3px 6px rgba(0,0,0,.08);
}
.demo-section:not(.wide), #exampleWrap .box:not(.wide) {
    max-width: 400px;
}

.demo-section {
    margin: 0 auto 4.5em;
    padding: 3em;
    border: 1px solid rgba(20,53,80,0.14);
}
 .file-icon {
                    display: inline-block;
                    float: left;
                    width: 48px;
                    height: 48px;
                    margin-left: 10px;
                    margin-top: 13.5px;
                }

                .img-file { background-image: url(../content/web/upload/jpg.png) }
                .doc-file { background-image: url(../content/web/upload/doc.png) }
                .pdf-file { background-image: url(../content/web/upload/pdf.png) }
                .xls-file { background-image: url(../content/web/upload/xls.png) }
                .zip-file { background-image: url(../content/web/upload/zip.png) }
                .default-file { background-image: url(../content/web/upload/default.png) }

                #example .file-heading {
                    font-family: Arial;
                    font-size: 1.1em;
                    display: inline-block;
                    float: left;
                    width: 60%;
                    margin: 0 0 0 20px;
                    height: 25px;
                    -ms-text-overflow: ellipsis;
                    -o-text-overflow: ellipsis;
                    text-overflow: ellipsis;
                    overflow:hidden;
                    white-space:nowrap;
                }

                #example .file-name-heading {
                    font-weight: bold;
                    margin-top: 20px;
                }

                 #example .file-size-heading {
                    font-weight: normal;
                    font-style: italic;
                }

                li.k-file .file-wrapper .k-upload-action {
                    position: absolute;
                    top: 0;
                    right: 0;
                }

                li.k-file div.file-wrapper {
                    position: relative;
                    height: 75px;
                }
</style>
<script id="fileTemplate" type="text/x-kendo-template">
    <span class='k-progress'></span>
    <div class='file-wrapper'>
        <span class='file-icon #=addExtensionClass(files[0].extension)#'></span>
        <h4 class='file-heading file-name-heading'>Name: #=name#</h4>
        <h4 class='file-heading file-size-heading'>Size: #=size# bytes</h4>
        <button type='button' class='k-upload-action'></button>
    </div>
</script>

<script>

    function onSelect(e) {
        console.log("Select :: " + getFileInfo(e));
    }

    function onUpload(e) {
        var file = e.files[0];
        console.log("file :: " + file.name);

        $("#FileName").val(file.name);
        $("#Size").val(file.size);
        console.log("Upload :: " + getFileInfo(e));
    }

    function onSuccess(e) {
        var currentInitialFiles = JSON.parse(sessionStorage.initialFiles);
        for (var i = 0; i < e.files.length; i++) {
            var current = {
                name: e.files[i].name,
                extension: e.files[i].extension,
                size: e.files[i].size
            }

            if (e.operation == "upload") {
                currentInitialFiles.push(current);
            } else {
                var indexOfFile = currentInitialFiles.indexOf(current);
                currentInitialFiles.splice(indexOfFile, 1);
            }
        }
        sessionStorage.initialFiles = JSON.stringify(currentInitialFiles);

        console.log("Success (" + e.operation + ") :: " + getFileInfo(e));
    }

    function onError(e) {
        console.log("Error (" + e.operation + ") :: " + getFileInfo(e));
    }

    function onComplete(e) {
        console.log("Complete");
    }

    function onCancel(e) {
        console.log("Cancel :: " + getFileInfo(e));
    }

    function onRemove(e) {
        console.log("Remove :: " + getFileInfo(e));
    }

    function onProgress(e) {
        console.log("Upload progress :: " + e.percentComplete + "% :: " + getFileInfo(e));
    }

    function getFileInfo(e) {
        return $.map(e.files, function (file) {
            var info = file.name;
            console.log(file);
            // File size is not available in all browsers
            if (file.size > 0) {
                info += " (" + Math.ceil(file.size / 1024) + " KB)";
            }
            return info;
        }).join(", ");
    }
    function addExtensionClass(extension) {
        switch (extension) {
            case '.jpg':
            case '.img':
            case '.png':
            case '.gif':
                return "img-file";
            case '.doc':
            case '.docx':
                return "doc-file";
            case '.xls':
            case '.xlsx':
                return "xls-file";
            case '.pdf':
                return "pdf-file";
            case '.zip':
            case '.rar':
                return "zip-file";
            default:
                return "default-file";
        }
    }
    $(document).ready(function () {
        //if (sessionStorage.initialFiles === undefined) {
        //    sessionStorage.initialFiles = "[]";
        //}

        //var initialFiles = JSON.parse(sessionStorage.initialFiles);

                    $("#files").kendoUpload({
                        async: {
                            saveUrl: "/File/Save?uid=@Model.UniqueId",
                            removeUrl: "/File/remove?uid=@Model.UniqueId",
                            autoUpload: true
                        },
                        multiple:false,
                     
                        template: kendo.template($('#fileTemplate').html()),
                        cancel: onCancel,
                        complete: onComplete,
                        error: onError,
                        progress: onProgress,
                        remove: onRemove,
                        select: onSelect,
                        success: onSuccess,
                        upload: onUpload
                    });
                });
</script>
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    
    <div class="form-horizontal">
        <h4>Create New Resource File</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Type, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type)
                @Html.ValidationMessageFor(model => model.Type)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Status)
                @Html.ValidationMessageFor(model => model.Status)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Remarks, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remarks)
                @Html.ValidationMessageFor(model => model.Remarks)
            </div>
        </div>

                @Html.HiddenFor(model => model.UniqueId)
                @Html.HiddenFor(model => model.FileName)
                @Html.HiddenFor(model => model.Size)
        @Html.HiddenFor(model => model.DateCreated)




        

        <div id="example">

            <div class="demo-section k-content">
                <input name="files" id="files" type="file" />
            </div>
        </div>
        @*@Html.TextBoxFor(m => m.BatchId, new { type = "file", @class = "files" })*@


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}




<div>
    @Html.ActionLink("Back to List", "Files")
</div>
